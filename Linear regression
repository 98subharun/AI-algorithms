import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

#Data Setup(this will be done on each slide)
#Creating synthetic data for a regression task
np.random.seed(42)
X = np.linspace(-3, 3, 100).reshape(-1, 1)
#Non-linear relationship for a better test (e.g., cubic)
y = 2 * X**3 - 3 * X**2 + X + 5 + np.random.normal(0, 5, 100).reshape(-1, 1)

#Split data
X_train, X_test, y_train, y_test = train_test_split(X, y.ravel(), test_size=0.3, random_state=42)

#Standardize data for models sensitive to scale (like DNN and KNN)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(f"Dataset Size: {len(X)} samples")

#Dictionary to store results
results = {}


#Linear Regression
#It's basically a linear model that assumes a straight-line relationship between the input
#features (X) and the target variable (y). It finds the best-fit line that minimizes
#the sum of the squared differences between the predicted values and the actual values.
#Ideal for simple, linearly separable data.

print("1. Linear Regression")
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)
mse_lin = mean_squared_error(y_test, y_pred_lin)
results['Linear Regression'] = mse_lin
print(f"  MSE: {mse_lin:.2f}\n")